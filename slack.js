require("source-map-support").install(),require("regenerator-runtime/runtime"),function(r,e){for(var n in e)r[n]=e[n]}(exports,function(r){function e(t){if(n[t])return n[t].exports;var o=n[t]={i:t,l:!1,exports:{}};return r[t].call(o.exports,o,o.exports,e),o.l=!0,o.exports}var n={};return e.m=r,e.c=n,e.i=function(r){return r},e.d=function(r,e,n){Object.defineProperty(r,e,{configurable:!1,enumerable:!0,get:n})},e.n=function(r){var n=r&&r.__esModule?function(){return r.default}:function(){return r};return e.d(n,"a",n),n},e.o=function(r,e){return Object.prototype.hasOwnProperty.call(r,e)},e.p="",e(e.s=1)}([function(r,e){r.exports=require("@exoplay/exobot")},function(r,e,n){"use strict";throw new Error('Cannot find module "@slack/client"')}]));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vc2xhY2suanMiLCJ3ZWJwYWNrOi8vL3dlYnBhY2svYm9vdHN0cmFwIDg4NTUwZGVjNjUyMTQxZWFjMDBmIiwid2VicGFjazovLy9leHRlcm5hbCBcIkBleG9wbGF5L2V4b2JvdFwiIl0sIm5hbWVzIjpbInJlcXVpcmUiLCJpbnN0YWxsIiwiZSIsImEiLCJpIiwiZXhwb3J0cyIsIm1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJpbnN0YWxsZWRNb2R1bGVzIiwibW9kdWxlIiwibCIsImNhbGwiLCJtIiwiYyIsInZhbHVlIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImNvbmZpZ3VyYWJsZSIsImVudW1lcmFibGUiLCJnZXQiLCJuIiwiX19lc01vZHVsZSIsIm8iLCJvYmplY3QiLCJwcm9wZXJ0eSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwicCIsInMiLCJFcnJvciJdLCJtYXBwaW5ncyI6IkFBQUFBLFFBQVEsc0JBQXNCQyxVQUFVRCxRQUFRLCtCQUMvQyxTQUFTRSxFQUFHQyxHQUFLLElBQUksR0FBSUMsS0FBS0QsR0FBR0QsRUFBRUUsR0FBS0QsRUFBRUMsSUFBTUMsUUFBa0IsU0FBVUMsR0NHN0UsUUFBQUMsR0FBQUMsR0FHQSxHQUFBQyxFQUFBRCxHQUNBLE1BQUFDLEdBQUFELEdBQUFILE9BR0EsSUFBQUssR0FBQUQsRUFBQUQsSUFDQUosRUFBQUksRUFDQUcsR0FBQSxFQUNBTixXQVVBLE9BTkFDLEdBQUFFLEdBQUFJLEtBQUFGLEVBQUFMLFFBQUFLLElBQUFMLFFBQUFFLEdBR0FHLEVBQUFDLEdBQUEsRUFHQUQsRUFBQUwsUUF2QkEsR0FBQUksS0E2REEsT0FqQ0FGLEdBQUFNLEVBQUFQLEVBR0FDLEVBQUFPLEVBQUFMLEVBR0FGLEVBQUFILEVBQUEsU0FBQVcsR0FBMkMsTUFBQUEsSUFHM0NSLEVBQUFTLEVBQUEsU0FBQVgsRUFBQVksRUFBQUMsR0FDQUMsT0FBQUMsZUFBQWYsRUFBQVksR0FDQUksY0FBQSxFQUNBQyxZQUFBLEVBQ0FDLElBQUFMLEtBS0FYLEVBQUFpQixFQUFBLFNBQUFkLEdBQ0EsR0FBQVEsR0FBQVIsS0FBQWUsV0FDQSxXQUEyQixNQUFBZixHQUFBLFNBQzNCLFdBQWlDLE1BQUFBLEdBRWpDLE9BREFILEdBQUFTLEVBQUFFLEVBQUEsSUFBQUEsR0FDQUEsR0FJQVgsRUFBQW1CLEVBQUEsU0FBQUMsRUFBQUMsR0FBc0QsTUFBQVQsUUFBQVUsVUFBQUMsZUFBQWxCLEtBQUFlLEVBQUFDLElBR3REckIsRUFBQXdCLEVBQUEsR0FHQXhCLElBQUF5QixFQUFBLEtET00sU0FBU3RCLEVBQVFMLEdFckV2QkssRUFBQUwsUUFBQUwsUUFBQSxvQkYyRU0sU0FBU1UsRUFBUUwsRUFBU0UsR0FFaEMsWUFDQSxNQUFNLElBQUkwQixPQUFNIiwiZmlsZSI6InNsYWNrLmpzIiwic291cmNlc0NvbnRlbnQiOlsicmVxdWlyZShcInNvdXJjZS1tYXAtc3VwcG9ydFwiKS5pbnN0YWxsKCk7cmVxdWlyZShcInJlZ2VuZXJhdG9yLXJ1bnRpbWUvcnVudGltZVwiKTtcbihmdW5jdGlvbihlLCBhKSB7IGZvcih2YXIgaSBpbiBhKSBlW2ldID0gYVtpXTsgfShleHBvcnRzLCAvKioqKioqLyAoZnVuY3Rpb24obW9kdWxlcykgeyAvLyB3ZWJwYWNrQm9vdHN0cmFwXG4vKioqKioqLyBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbi8qKioqKiovIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4vKioqKioqLyBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4vKioqKioqLyBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pXG4vKioqKioqLyBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbi8qKioqKiovIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4vKioqKioqLyBcdFx0XHRpOiBtb2R1bGVJZCxcbi8qKioqKiovIFx0XHRcdGw6IGZhbHNlLFxuLyoqKioqKi8gXHRcdFx0ZXhwb3J0czoge31cbi8qKioqKiovIFx0XHR9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbi8qKioqKiovIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuLyoqKioqKi8gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbi8qKioqKiovIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4vKioqKioqLyBcdH1cbi8qKioqKiovXG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGlkZW50aXR5IGZ1bmN0aW9uIGZvciBjYWxsaW5nIGhhcm1vcnkgaW1wb3J0cyB3aXRoIHRoZSBjb3JyZWN0IGNvbnRleHRcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5pID0gZnVuY3Rpb24odmFsdWUpIHsgcmV0dXJuIHZhbHVlOyB9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9yeSBleHBvcnRzXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuLyoqKioqKi8gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7XG4vKioqKioqLyBcdFx0XHRjb25maWd1cmFibGU6IGZhbHNlLFxuLyoqKioqKi8gXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcbi8qKioqKiovIFx0XHRcdGdldDogZ2V0dGVyXG4vKioqKioqLyBcdFx0fSk7XG4vKioqKioqLyBcdH07XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbi8qKioqKiovIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbi8qKioqKiovIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4vKioqKioqLyBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuLyoqKioqKi8gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbi8qKioqKiovIFx0XHRyZXR1cm4gZ2V0dGVyO1xuLyoqKioqKi8gXHR9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbi8qKioqKiovIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMSk7XG4vKioqKioqLyB9KVxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKioqKiovIChbXG4vKiAwICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiQGV4b3BsYXkvZXhvYm90XCIpO1xuXG4vKioqLyB9LFxuLyogMSAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xudGhyb3cgbmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlIFxcXCJAc2xhY2svY2xpZW50XFxcIlwiKTtcbnRocm93IG5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSBcXFwiQHNsYWNrL2NsaWVudC9saWIvbW9kZWxzXFxcIlwiKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX2V4b3BsYXlfZXhvYm90X18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fZXhvcGxheV9leG9ib3RfX19kZWZhdWx0ID0gX193ZWJwYWNrX3JlcXVpcmVfXy5uKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fZXhvcGxheV9leG9ib3RfXyk7XG4vKiBoYXJtb255IGV4cG9ydCAoYmluZGluZykgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKGV4cG9ydHMsIFwiRVZFTlRTXCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gRVZFTlRTOyB9KTtcbi8qIGhhcm1vbnkgZXhwb3J0IChiaW5kaW5nKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZXhwb3J0cywgXCJTbGFja0FkYXB0ZXJcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBTbGFja0FkYXB0ZXI7IH0pO1xudmFyIF9FVkVOVFM7XG5cbmZ1bmN0aW9uIF9hc3luY1RvR2VuZXJhdG9yKGZuKSB7IHJldHVybiBmdW5jdGlvbiAoKSB7IHZhciBnZW4gPSBmbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgeyBmdW5jdGlvbiBzdGVwKGtleSwgYXJnKSB7IHRyeSB7IHZhciBpbmZvID0gZ2VuW2tleV0oYXJnKTsgdmFyIHZhbHVlID0gaW5mby52YWx1ZTsgfSBjYXRjaCAoZXJyb3IpIHsgcmVqZWN0KGVycm9yKTsgcmV0dXJuOyB9IGlmIChpbmZvLmRvbmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0gZWxzZSB7IHJldHVybiBQcm9taXNlLnJlc29sdmUodmFsdWUpLnRoZW4oZnVuY3Rpb24gKHZhbHVlKSB7IHN0ZXAoXCJuZXh0XCIsIHZhbHVlKTsgfSwgZnVuY3Rpb24gKGVycikgeyBzdGVwKFwidGhyb3dcIiwgZXJyKTsgfSk7IH0gfSByZXR1cm4gc3RlcChcIm5leHRcIik7IH0pOyB9OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxuXG5cblxuXG5cblxudmFyIGRtTmFtZSA9IG5ldyBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX3NsYWNrX2NsaWVudF9saWJfbW9kZWxzX19fZGVmYXVsdC5hLkRNKCkuX21vZGVsTmFtZTtcblxudmFyIEVWRU5UUyA9IChfRVZFTlRTID0ge30sIF9FVkVOVFNbX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19zbGFja19jbGllbnRfX1tcIkNMSUVOVF9FVkVOVFNcIl0uUlRNLkNPTk5FQ1RJTkddID0gJ3NsYWNrQ29ubmVjdGluZycsIF9FVkVOVFNbX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19zbGFja19jbGllbnRfX1tcIkNMSUVOVF9FVkVOVFNcIl0uUlRNLlJUTV9DT05ORUNUSU9OX09QRU5FRF0gPSAnc2xhY2tDb25uZWN0ZWQnLCBfRVZFTlRTW19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fc2xhY2tfY2xpZW50X19bXCJDTElFTlRfRVZFTlRTXCJdLlJUTS5BVVRIRU5USUNBVEVEXSA9ICdzbGFja0F1dGhlbnRpY2F0ZWQnLCBfRVZFTlRTW19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fc2xhY2tfY2xpZW50X19bXCJDTElFTlRfRVZFTlRTXCJdLlJUTS5ESVNDT05ORUNUXSA9ICdzbGFja0Rpc2Nvbm5lY3RlZCcsIF9FVkVOVFNbX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19zbGFja19jbGllbnRfX1tcIkNMSUVOVF9FVkVOVFNcIl0uUlRNLlVOQUJMRV9UT19SVE1fU1RBUlRdID0gJ3NsYWNrVW5hYmxlVG9TdGFydCcsIF9FVkVOVFNbX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19zbGFja19jbGllbnRfX1tcIkNMSUVOVF9FVkVOVFNcIl0uUlRNLkFUVEVNUFRJTkdfUkVDT05ORUNUXSA9ICdzbGFja1JlY29ubmVjdGluZycsIF9FVkVOVFNbX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19zbGFja19jbGllbnRfX1tcIlJUTV9FVkVOVFNcIl0uTUVTU0FHRV0gPSAnc2xhY2tNZXNzYWdlJywgX0VWRU5UUyk7XG5cbnZhciBTbGFja0FkYXB0ZXIgPSBmdW5jdGlvbiAoX0FkYXB0ZXIpIHtcbiAgX2luaGVyaXRzKFNsYWNrQWRhcHRlciwgX0FkYXB0ZXIpO1xuXG4gIGZ1bmN0aW9uIFNsYWNrQWRhcHRlcihfcmVmKSB7XG4gICAgdmFyIHRva2VuID0gX3JlZi50b2tlbixcbiAgICAgICAgYWRhcHRlck5hbWUgPSBfcmVmLmFkYXB0ZXJOYW1lO1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFNsYWNrQWRhcHRlcik7XG5cbiAgICB2YXIgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfQWRhcHRlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcblxuICAgIF90aGlzLm5hbWUgPSAnU2xhY2snO1xuXG4gICAgX3RoaXMudG9rZW4gPSB0b2tlbjtcbiAgICBfdGhpcy5uYW1lID0gYWRhcHRlck5hbWUgfHwgX3RoaXMubmFtZTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICBTbGFja0FkYXB0ZXIucHJvdG90eXBlLnJlZ2lzdGVyID0gZnVuY3Rpb24gcmVnaXN0ZXIoYm90KSB7XG4gICAgdmFyIF9BZGFwdGVyJHByb3RvdHlwZSRyZSxcbiAgICAgICAgX3RoaXMyID0gdGhpcztcblxuICAgIChfQWRhcHRlciRwcm90b3R5cGUkcmUgPSBfQWRhcHRlci5wcm90b3R5cGUucmVnaXN0ZXIpLmNhbGwuYXBwbHkoX0FkYXB0ZXIkcHJvdG90eXBlJHJlLCBbdGhpc10uY29uY2F0KEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cykpKTtcbiAgICB2YXIgdG9rZW4gPSB0aGlzLnRva2VuO1xuXG5cbiAgICB0aGlzLmNsaWVudCA9IG5ldyBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX3NsYWNrX2NsaWVudF9fW1wiUnRtQ2xpZW50XCJdKHRva2VuLCB7IGxvZ0xldmVsOiBib3QubG9nTGV2ZWwgfSk7XG5cbiAgICBPYmplY3Qua2V5cyhFVkVOVFMpLmZvckVhY2goZnVuY3Rpb24gKHNsYWNrRXZlbnQpIHtcbiAgICAgIHZhciBtYXBwZWRGbiA9IF90aGlzMltFVkVOVFNbc2xhY2tFdmVudF1dO1xuICAgICAgX3RoaXMyLmNsaWVudC5vbihzbGFja0V2ZW50LCBtYXBwZWRGbi5iaW5kKF90aGlzMikpO1xuICAgICAgX3RoaXMyLmNsaWVudC5vbihzbGFja0V2ZW50LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfYm90JGVtaXR0ZXI7XG5cbiAgICAgICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgICAgICB9XG5cbiAgICAgICAgKF9ib3QkZW1pdHRlciA9IGJvdC5lbWl0dGVyKS5lbWl0LmFwcGx5KF9ib3QkZW1pdHRlciwgWydzbGFjay0nICsgc2xhY2tFdmVudF0uY29uY2F0KGFyZ3MpKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgdGhpcy5jbGllbnQuc3RhcnQoKTtcbiAgfTtcblxuICBTbGFja0FkYXB0ZXIucHJvdG90eXBlLnNlbmQgPSBmdW5jdGlvbiBzZW5kKG1lc3NhZ2UpIHtcbiAgICBpZiAobWVzc2FnZS50ZXh0KSB7XG4gICAgICB0aGlzLmJvdC5sb2cuZGVidWcoJ1NlbmRpbmcgJyArIG1lc3NhZ2UudGV4dCArICcgdG8gJyArIG1lc3NhZ2UuY2hhbm5lbCk7XG4gICAgICB0aGlzLmNsaWVudC5zZW5kTWVzc2FnZShtZXNzYWdlLnRleHQsIG1lc3NhZ2UuY2hhbm5lbCk7XG4gICAgfVxuICB9O1xuXG4gIFNsYWNrQWRhcHRlci5wcm90b3R5cGUuc2xhY2tDb25uZWN0aW5nID0gZnVuY3Rpb24gc2xhY2tDb25uZWN0aW5nKCkge1xuICAgIHRoaXMuYm90LmxvZy5pbmZvKCdDb25uZWN0aW5nIHRvIFNsYWNrLicpO1xuICAgIHRoaXMuc3RhdHVzID0gX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19leG9wbGF5X2V4b2JvdF9fW1wiQWRhcHRlclwiXS5TVEFUVVMuQ09OTkVDVElORztcbiAgfTtcblxuICBTbGFja0FkYXB0ZXIucHJvdG90eXBlLnNsYWNrQ29ubmVjdGVkID0gZnVuY3Rpb24gc2xhY2tDb25uZWN0ZWQoKSB7XG4gICAgdGhpcy5ib3QubG9nLmluZm8oJ0Nvbm5lY3RlZCB0byBTbGFjay4nKTtcbiAgfTtcblxuICBTbGFja0FkYXB0ZXIucHJvdG90eXBlLnNsYWNrQXV0aGVudGljYXRlZCA9IGZ1bmN0aW9uIHNsYWNrQXV0aGVudGljYXRlZCgpIHtcbiAgICB0aGlzLmJvdC5sb2cubm90aWNlKCdTdWNjZXNzZnVsbHkgYXV0aGVudGljYXRlZCB0byBTbGFjay4nKTtcbiAgICB0aGlzLnN0YXR1cyA9IF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fZXhvcGxheV9leG9ib3RfX1tcIkFkYXB0ZXJcIl0uU1RBVFVTLkNPTk5FQ1RFRDtcbiAgfTtcblxuICBTbGFja0FkYXB0ZXIucHJvdG90eXBlLnNsYWNrRGlzY29ubmVjdGVkID0gZnVuY3Rpb24gc2xhY2tEaXNjb25uZWN0ZWQoKSB7XG4gICAgdGhpcy5ib3QubG9nLmNyaXRpY2FsKCdEaXNjb25uZWN0ZWQgZnJvbSBTbGFjay4nKTtcbiAgICB0aGlzLnN0YXR1cyA9IF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fZXhvcGxheV9leG9ib3RfX1tcIkFkYXB0ZXJcIl0uU1RBVFVTLkRJU0NPTk5FQ1RFRDtcbiAgfTtcblxuICBTbGFja0FkYXB0ZXIucHJvdG90eXBlLnNsYWNrVW5hYmxlVG9TdGFydCA9IGZ1bmN0aW9uIHNsYWNrVW5hYmxlVG9TdGFydCgpIHtcbiAgICB0aGlzLmJvdC5sb2cuY3JpdGljYWwoJ1VuYWJsZSB0byBzdGFydCBTbGFjay4nKTtcbiAgICB0aGlzLnN0YXR1cyA9IF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fZXhvcGxheV9leG9ib3RfX1tcIkFkYXB0ZXJcIl0uU1RBVFVTLkRJU0NPTk5FQ1RFRDtcbiAgfTtcblxuICBTbGFja0FkYXB0ZXIucHJvdG90eXBlLnNsYWNrUmVjb25uZWN0aW5nID0gZnVuY3Rpb24gc2xhY2tSZWNvbm5lY3RpbmcoKSB7XG4gICAgdGhpcy5ib3QubG9nLm5vdGljZSgnUmVjb25uZWN0aW5nIHRvIFNsYWNrLicpO1xuICAgIHRoaXMuc3RhdHVzID0gX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19leG9wbGF5X2V4b2JvdF9fW1wiQWRhcHRlclwiXS5TVEFUVVMuUkVDT05ORUNUSU5HO1xuICB9O1xuXG4gIFNsYWNrQWRhcHRlci5wcm90b3R5cGUuZ2V0Um9sZXNGb3JVc2VyID0gZnVuY3Rpb24gZ2V0Um9sZXNGb3JVc2VyKHVzZXJJZCkge1xuICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gICAgaWYgKHRoaXMuYWRhcHRlclVzZXJzICYmIHRoaXMucm9sZU1hcHBpbmcgJiYgdGhpcy5hZGFwdGVyVXNlcnNbdXNlcklkXSkge1xuICAgICAgcmV0dXJuIHRoaXMuYWRhcHRlclVzZXJzW3VzZXJJZF0ucm9sZXMuZmlsdGVyKGZ1bmN0aW9uIChyb2xlKSB7XG4gICAgICAgIHJldHVybiBfdGhpczMucm9sZU1hcHBpbmdbcm9sZV07XG4gICAgICB9KS5tYXAoZnVuY3Rpb24gKHJvbGUpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzMy5yb2xlTWFwcGluZ1tyb2xlXTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBbXTtcbiAgfTtcblxuICBTbGFja0FkYXB0ZXIucHJvdG90eXBlLmdldFJvbGVzID0gZnVuY3Rpb24gZ2V0Um9sZXMoYWRhcHRlclVzZXJJZCwgYWRhcHRlclVzZXIpIHtcbiAgICB2YXIgcm9sZXMgPSBbXTtcbiAgICBpZiAoYWRhcHRlclVzZXIpIHtcbiAgICAgIGlmIChhZGFwdGVyVXNlci5pc19hZG1pbikge1xuICAgICAgICByb2xlcy5wdXNoKCdhZG1pbicpO1xuICAgICAgfVxuXG4gICAgICBpZiAoYWRhcHRlclVzZXIuaXNfb3duZXIpIHtcbiAgICAgICAgcm9sZXMucHVzaCgnb3duZXInKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByb2xlcztcbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH07XG5cbiAgU2xhY2tBZGFwdGVyLnByb3RvdHlwZS5zbGFja01lc3NhZ2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIF9yZWYyID0gX2FzeW5jVG9HZW5lcmF0b3IocmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZShtZXNzYWdlKSB7XG4gICAgICB2YXIgdXNlciwgYm90SWQsIHNsYWNrVXNlciwgY2hhbm5lbDtcbiAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlJChfY29udGV4dCkge1xuICAgICAgICB3aGlsZSAoMSkge1xuICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQucHJldiA9IF9jb250ZXh0Lm5leHQpIHtcbiAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgdXNlciA9IHZvaWQgMDtcblxuICAgICAgICAgICAgICBpZiAobWVzc2FnZS50ZXh0KSB7XG4gICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDM7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuYWJydXB0KCdyZXR1cm4nKTtcblxuICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICBib3RJZCA9IHRoaXMuY2xpZW50LmFjdGl2ZVVzZXJJZDtcblxuICAgICAgICAgICAgICBpZiAoIShtZXNzYWdlLnVzZXIgPT09IGJvdElkKSkge1xuICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSA2O1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LmFicnVwdCgncmV0dXJuJyk7XG5cbiAgICAgICAgICAgIGNhc2UgNjpcblxuICAgICAgICAgICAgICB0aGlzLmJvdC5sb2cuZGVidWcobWVzc2FnZS50ZXh0KTtcbiAgICAgICAgICAgICAgc2xhY2tVc2VyID0gdGhpcy5jbGllbnQuZGF0YVN0b3JlLmdldFVzZXJCeUlkKG1lc3NhZ2UudXNlcik7XG5cbiAgICAgICAgICAgICAgaWYgKCFzbGFja1VzZXIpIHtcbiAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMTQ7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMTE7XG4gICAgICAgICAgICAgIHJldHVybiB0aGlzLmdldFVzZXIoc2xhY2tVc2VyLmlkLCBzbGFja1VzZXIubmFtZSwgc2xhY2tVc2VyKTtcblxuICAgICAgICAgICAgY2FzZSAxMTpcbiAgICAgICAgICAgICAgdXNlciA9IF9jb250ZXh0LnNlbnQ7XG4gICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAxNztcbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgMTQ6XG4gICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAxNjtcbiAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0VXNlcihtZXNzYWdlLnVzZXIsIHVuZGVmaW5lZCwgc2xhY2tVc2VyKTtcblxuICAgICAgICAgICAgY2FzZSAxNjpcbiAgICAgICAgICAgICAgdXNlciA9IF9jb250ZXh0LnNlbnQ7XG5cbiAgICAgICAgICAgIGNhc2UgMTc6XG4gICAgICAgICAgICAgIGNoYW5uZWwgPSB0aGlzLmNsaWVudC5kYXRhU3RvcmUuZ2V0Q2hhbm5lbEdyb3VwT3JETUJ5SWQobWVzc2FnZS5jaGFubmVsKTtcblxuICAgICAgICAgICAgICBpZiAoIW1lc3NhZ2UudGV4dCkge1xuICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAyMjtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGlmICghKGNoYW5uZWwgJiYgY2hhbm5lbC5fbW9kZWxOYW1lID09PSBkbU5hbWUpKSB7XG4gICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDIxO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LmFicnVwdCgncmV0dXJuJywgX0FkYXB0ZXIucHJvdG90eXBlLnJlY2VpdmVXaGlzcGVyLmNhbGwodGhpcywgeyB1c2VyOiB1c2VyLCB0ZXh0OiBtZXNzYWdlLnRleHQsIGNoYW5uZWw6IG1lc3NhZ2UuY2hhbm5lbCB9KSk7XG5cbiAgICAgICAgICAgIGNhc2UgMjE6XG5cbiAgICAgICAgICAgICAgX0FkYXB0ZXIucHJvdG90eXBlLnJlY2VpdmUuY2FsbCh0aGlzLCB7IHVzZXI6IHVzZXIsIHRleHQ6IG1lc3NhZ2UudGV4dCwgY2hhbm5lbDogbWVzc2FnZS5jaGFubmVsIH0pO1xuXG4gICAgICAgICAgICBjYXNlIDIyOlxuICAgICAgICAgICAgY2FzZSAnZW5kJzpcbiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LnN0b3AoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sIF9jYWxsZWUsIHRoaXMpO1xuICAgIH0pKTtcblxuICAgIGZ1bmN0aW9uIHNsYWNrTWVzc2FnZShfeCkge1xuICAgICAgcmV0dXJuIF9yZWYyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHNsYWNrTWVzc2FnZTtcbiAgfSgpO1xuXG4gIFNsYWNrQWRhcHRlci5wcm90b3R5cGUuZ2V0VXNlcklkQnlVc2VyTmFtZSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgX3JlZjMgPSBfYXN5bmNUb0dlbmVyYXRvcihyZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlMihuYW1lKSB7XG4gICAgICB2YXIgdXNlciwgYm90VXNlcjtcbiAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlMiQoX2NvbnRleHQyKSB7XG4gICAgICAgIHdoaWxlICgxKSB7XG4gICAgICAgICAgc3dpdGNoIChfY29udGV4dDIucHJldiA9IF9jb250ZXh0Mi5uZXh0KSB7XG4gICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgIHVzZXIgPSB0aGlzLmNsaWVudC5kYXRhU3RvcmUuZ2V0VXNlckJ5TmFtZShuYW1lKTtcblxuICAgICAgICAgICAgICBpZiAoIXVzZXIpIHtcbiAgICAgICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDEzO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgYm90VXNlciA9IHZvaWQgMDtcbiAgICAgICAgICAgICAgX2NvbnRleHQyLnByZXYgPSAzO1xuICAgICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDY7XG4gICAgICAgICAgICAgIHJldHVybiB0aGlzLmdldFVzZXIodXNlci5pZCwgdXNlci5uYW1lLCB1c2VyKTtcblxuICAgICAgICAgICAgY2FzZSA2OlxuICAgICAgICAgICAgICBib3RVc2VyID0gX2NvbnRleHQyLnNlbnQ7XG4gICAgICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gMTI7XG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIDk6XG4gICAgICAgICAgICAgIF9jb250ZXh0Mi5wcmV2ID0gOTtcbiAgICAgICAgICAgICAgX2NvbnRleHQyLnQwID0gX2NvbnRleHQyWydjYXRjaCddKDMpO1xuXG4gICAgICAgICAgICAgIHRoaXMuYm90LmxvZy53YXJuKF9jb250ZXh0Mi50MCk7XG5cbiAgICAgICAgICAgIGNhc2UgMTI6XG4gICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIuYWJydXB0KCdyZXR1cm4nLCBib3RVc2VyLmlkKTtcblxuICAgICAgICAgICAgY2FzZSAxMzpcbiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5hYnJ1cHQoJ3JldHVybicpO1xuXG4gICAgICAgICAgICBjYXNlIDE0OlxuICAgICAgICAgICAgY2FzZSAnZW5kJzpcbiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5zdG9wKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LCBfY2FsbGVlMiwgdGhpcywgW1szLCA5XV0pO1xuICAgIH0pKTtcblxuICAgIGZ1bmN0aW9uIGdldFVzZXJJZEJ5VXNlck5hbWUoX3gyKSB7XG4gICAgICByZXR1cm4gX3JlZjMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZ2V0VXNlcklkQnlVc2VyTmFtZTtcbiAgfSgpO1xuXG4gIHJldHVybiBTbGFja0FkYXB0ZXI7XG59KF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fZXhvcGxheV9leG9ib3RfX1tcIkFkYXB0ZXJcIl0pO1xuXG4vKioqLyB9XG4vKioqKioqLyBdKSkpO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyBzbGFjay5qcyIsIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKVxuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuXG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBpZGVudGl0eSBmdW5jdGlvbiBmb3IgY2FsbGluZyBoYXJtb3J5IGltcG9ydHMgd2l0aCB0aGUgY29ycmVjdCBjb250ZXh0XG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmkgPSBmdW5jdGlvbih2YWx1ZSkgeyByZXR1cm4gdmFsdWU7IH07XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vcnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7XG4gXHRcdFx0Y29uZmlndXJhYmxlOiBmYWxzZSxcbiBcdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuIFx0XHRcdGdldDogZ2V0dGVyXG4gXHRcdH0pO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAxKTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyB3ZWJwYWNrL2Jvb3RzdHJhcCA4ODU1MGRlYzY1MjE0MWVhYzAwZiIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIkBleG9wbGF5L2V4b2JvdFwiKTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyBleHRlcm5hbCBcIkBleG9wbGF5L2V4b2JvdFwiXG4vLyBtb2R1bGUgaWQgPSAwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=