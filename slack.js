require("source-map-support").install(),require("regenerator-runtime/runtime"),function(t,e){for(var n in e)t[n]=e[n]}(exports,function(t){function e(r){if(n[r])return n[r].exports;var o=n[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,e),o.l=!0,o.exports}var n={};return e.m=t,e.c=n,e.i=function(t){return t},e.d=function(t,e,n){Object.defineProperty(t,e,{configurable:!1,enumerable:!0,get:n})},e.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(n,"a",n),n},e.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},e.p="",e(e.s=3)}([function(t,e){t.exports=require("@exoplay/exobot")},function(t,e){t.exports=require("@slack/client")},function(t,e){t.exports=require("@slack/client/lib/models")},function(t,e,n){"use strict";function r(t){return function(){var e=t.apply(this,arguments);return new Promise(function(t,n){function r(o,a){try{var i=e[o](a),c=i.value}catch(t){return void n(t)}return i.done?void t(c):Promise.resolve(c).then(function(t){r("next",t)},function(t){r("throw",t)})}return r("next")})}}function o(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function a(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function i(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}var c=n(1),s=(n.n(c),n(2)),u=n.n(s),l=n(0);n.n(l);n.d(e,"EVENTS",function(){return h}),n.d(e,"SlackAdapter",function(){return d});var p,f=(new u.a.DM)._modelName,h=(p={},p[c.CLIENT_EVENTS.RTM.CONNECTING]="slackConnecting",p[c.CLIENT_EVENTS.RTM.RTM_CONNECTION_OPENED]="slackConnected",p[c.CLIENT_EVENTS.RTM.AUTHENTICATED]="slackAuthenticated",p[c.CLIENT_EVENTS.RTM.DISCONNECT]="slackDisconnected",p[c.CLIENT_EVENTS.RTM.UNABLE_TO_RTM_START]="slackUnableToStart",p[c.CLIENT_EVENTS.RTM.ATTEMPTING_RECONNECT]="slackReconnecting",p[c.RTM_EVENTS.MESSAGE]="slackMessage",p),d=function(t){function e(n){var r=n.token,i=n.adapterName;o(this,e);var c=a(this,t.apply(this,arguments));return c.name="Slack",c.token=r,c.name=i||c.name,c}return i(e,t),e.prototype.register=function(e){var n,r=this;(n=t.prototype.register).call.apply(n,[this].concat(Array.prototype.slice.call(arguments)));var o=this.token;this.client=new c.RtmClient(o,{logLevel:e.logLevel}),Object.keys(h).forEach(function(t){var n=r[h[t]];r.client.on(t,n.bind(r)),r.client.on(t,function(){for(var n,r=arguments.length,o=Array(r),a=0;a<r;a++)o[a]=arguments[a];(n=e.emitter).emit.apply(n,["slack-"+t].concat(o))})}),this.client.start()},e.prototype.send=function(t){t.text&&(this.bot.log.debug("Sending "+t.text+" to "+t.channel),this.client.sendMessage(t.text,t.channel))},e.prototype.slackConnecting=function(){this.bot.log.info("Connecting to Slack."),this.status=l.Adapter.STATUS.CONNECTING},e.prototype.slackConnected=function(){this.bot.log.info("Connected to Slack.")},e.prototype.slackAuthenticated=function(){this.bot.log.notice("Successfully authenticated to Slack."),this.status=l.Adapter.STATUS.CONNECTED},e.prototype.slackDisconnected=function(){this.bot.log.critical("Disconnected from Slack."),this.status=l.Adapter.STATUS.DISCONNECTED},e.prototype.slackUnableToStart=function(){this.bot.log.critical("Unable to start Slack."),this.status=l.Adapter.STATUS.DISCONNECTED},e.prototype.slackReconnecting=function(){this.bot.log.notice("Reconnecting to Slack."),this.status=l.Adapter.STATUS.RECONNECTING},e.prototype.getRolesForUser=function(t){var e=this;return this.adapterUsers&&this.roleMapping&&this.adapterUsers[t]?this.adapterUsers[t].roles.filter(function(t){return e.roleMapping[t]}).map(function(t){return e.roleMapping[t]}):[]},e.prototype.getRoles=function(t,e){var n=[];return!!e&&(e.is_admin&&n.push("admin"),e.is_owner&&n.push("owner"),n)},e.prototype.slackMessage=function(){function e(t){return n.apply(this,arguments)}var n=r(regeneratorRuntime.mark(function e(n){var r,o,a,i;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:if(r=void 0,n.text){e.next=3;break}return e.abrupt("return");case 3:if(o=this.client.activeUserId,n.user!==o){e.next=6;break}return e.abrupt("return");case 6:if(this.bot.log.debug(n.text),a=this.client.dataStore.getUserById(n.user),!a){e.next=14;break}return e.next=11,this.getUser(a.id,a.name,a);case 11:r=e.sent,e.next=17;break;case 14:return e.next=16,this.getUser(n.user,void 0,a);case 16:r=e.sent;case 17:if(i=this.client.dataStore.getChannelGroupOrDMById(n.channel),!n.text){e.next=22;break}if(!i||i._modelName!==f){e.next=21;break}return e.abrupt("return",t.prototype.receiveWhisper.call(this,{user:r,text:n.text,channel:n.channel}));case 21:t.prototype.receive.call(this,{user:r,text:n.text,channel:n.channel});case 22:case"end":return e.stop()}},e,this)}));return e}(),e.prototype.getUserIdByUserName=function(){function t(t){return e.apply(this,arguments)}var e=r(regeneratorRuntime.mark(function t(e){var n,r;return regeneratorRuntime.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:if(n=this.client.dataStore.getUserByName(e),!n){t.next=13;break}return r=void 0,t.prev=3,t.next=6,this.getUser(n.id,n.name,n);case 6:r=t.sent,t.next=12;break;case 9:t.prev=9,t.t0=t.catch(3),this.bot.log.warn(t.t0);case 12:return t.abrupt("return",r.id);case 13:return t.abrupt("return");case 14:case"end":return t.stop()}},t,this,[[3,9]])}));return t}(),e}(l.Adapter)}]));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,